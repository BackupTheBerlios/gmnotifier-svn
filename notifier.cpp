/*
* This file is part of GmNotifier, an open-source cross-platform Gmail Notifier
* Copyright (C) 2009  Eric Lembregts
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
*
* Contact e-mail: Eric Lembregts <eric@lembregts.net>
* Program URL   : http://code.google.com/p/gmnotifier/
*/

#include "notifier.h"

#include <QFile>
#include <QTextStream>
#include <QDesktopServices>

Notifier::Notifier(QObject * parent)
        : QThread(parent)
{
        httpConnection = 0;
        connectionUrl = 0;
}

void Notifier::setParameters()
{
        if(httpConnection != 0){
                httpConnection->close();
                delete httpConnection;
        }

        httpConnection = new QHttp(this);

        if(connectionUrl != 0){
                delete connectionUrl;
        }

        connectionUrl = new QUrl("https://mail.google.com/mail/feed/atom");

        if(config.hosted()){
                connectionUrl = new QUrl("https://mail.google.com/a/" + config.domain() +"/feed/atom");
        }

        httpConnection->setHost(connectionUrl->host(), QHttp::ConnectionModeHttps,  connectionUrl->port() == -1 ? 0 : connectionUrl->port());

        connect(httpConnection, SIGNAL(requestFinished(int, bool)),
                this, SLOT(httpRequestFinished(int, bool)));
        connect(httpConnection, SIGNAL(authenticationRequired(const QString &, quint16, QAuthenticator *)),
                this, SLOT(loginUser(const QString &, quint16, QAuthenticator *)));

        loginAttempt = false;

        userName = config.userName();
        password = config.password();

        sleepTime = config.sleepTime();

        if(sleepTime < 30)
                sleepTime = 30;

        terminateThread = false;

        checkMail();
}

Notifier::~Notifier()
{
        terminateThread = true;
        exit(0);
}

void Notifier::run()
{
        do {
                this->sleep(sleepTime);

                if(!terminateThread){
                        checkMail();
                }
        } while(!terminateThread);

        delete httpConnection;
        delete connectionUrl;
}

void Notifier::manualCheck()
{
        startHttpRequest();
}

void Notifier::checkMail()
{
        startHttpRequest();
}

void Notifier::startHttpRequest()
{
        if(userName == "" || password == "")
                return;

        QByteArray path = QUrl::toPercentEncoding(connectionUrl->path(), "!$&'()*+,;=:@/");
        httpGetId = httpConnection->get(path);
}

void Notifier::httpRequestFinished(int requestId, bool error)
{
        if(requestId != httpGetId){
                //Unprocessed requests are ignored
                //Mostly generated by Qt's Network Interface
        }else if(error){
                if(loginAttempt){
                        emit newNotification(BROKEN, tr("Wrong username/password combination"), "");
                        loginAttempt = false;
                }else{
                        emit newNotification(BROKEN, tr("Could not establish a connection"), "");
                        loginAttempt = false;
                }
        }else{
                xml.clear();
                QByteArray data = httpConnection->readAll();
                xml.addData(data);
                QFile file(QDesktopServices::storageLocation(QDesktopServices::DataLocation) + "//output.xml");
                file.open(QIODevice::WriteOnly | QIODevice::Text);
                QTextStream fileStream(&file);
                fileStream << "Output: \n";
                fileStream << data;
                file.close();
                parseXml();
                loginAttempt = false;
        }
}

void Notifier::parseXml()
{
        bool arrivedAtEmailId = false;
        QString emailId = "";
        QList <QString> emailIds;
        bool validFile = false;

        //parse the atom feed, and keep the email id's
        while (!xml.atEnd()) {
                xml.readNext();
                //check if we find any email id's
                //no id's probably means that there is no email
                if (xml.name() == "id" && xml.isStartElement()) {
                        arrivedAtEmailId = true;
                }else if (xml.name() == "id" && xml.isEndElement()) {
                        arrivedAtEmailId = false;
                        emailIds.append(emailId);
                        emailId = "";
                }else if (arrivedAtEmailId && xml.isCharacters() && !xml.isWhitespace()) {
                        emailId += xml.text().toString();
                //to make sure we have a valid gmail file
                //this will search for the fullcount xml field
                //wich gives the inbox size
                }else if(xml.name() == "fullcount"){
                        validFile = true;
                }
        }

        if(validFile){
                parseNewMail(emailIds);
        }else{
                emit newNotification(BROKEN, tr("Incorrect atom feed supplied by Gmail"), "");
        }
}

void Notifier::parseNewMail(const QList<QString> newEmailIds)
{
        int countMail = 0;

        for(int i = 0; i < newEmailIds.size(); i++){
                if(!emailIds.contains(newEmailIds.at(i))){
                        countMail++;
                }
        }

        if(newEmailIds.size() == 0){
                emit newNotification(NONEW, tr("There is no new mail"), "");
        }else if(countMail != 0){
                emit newNotification(NEW,
                                tr("There are %1 new mail(s) in your inbox").arg(QString::number(newEmailIds.size())),
                                tr("There arrived %1 new mail(s)!").arg(QString::number(countMail)));
        }else{
                emit newNotification(NEW,
                                tr("There are %1 new mail(s) in your inbox").arg(QString::number(newEmailIds.size())),
                            "");
        }

        emailIds = newEmailIds;
}

void Notifier::loginUser(const QString &hostName, quint16, QAuthenticator *authenticator)
{
        if(loginAttempt){
                return;
        }

        loginAttempt = true;

        authenticator->setUser(userName);
    authenticator->setPassword(password);
}
